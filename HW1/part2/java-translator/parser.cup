/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }

    void construct_main(String b) {
        String result = "import java.lang.Math;\n\npublic class Main {\n\tpublic static void main(String[] args) {\t\t\n\t\t" + b + "\n\t}\n\n}";
        System.out.println(result);  
    }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, CONCAT, COMMA, LPAREN, RPAREN, LBRACE, RBRACE;
terminal String     STRING_LITERAL, IDENTIFIER, IF, ELSE, PREFIX, SUFFIX;   

/*  Non terminals */
non terminal           program; 
non terminal String    funcdec, funccall, body_func, args, body_main, body_if, if_else, expr;   

/**
 *  Precedence Declarations
 */
precedence left IF;
precedence left PREFIX,SUFFIX;
precedence left CONCAT;

/**
 *  The Grammar Rules
 */

program    ::= body_main:e1                        {: construct_main(e1); :}
            ;

body_main  ::= funcdec: e1 funccall: e2            {: RESULT = String.format("%s\n%s", e1, e2); :}
            ;

funcdec    ::= IDENTIFIER:e1 LPAREN args:e2 RPAREN {: RESULT = String.format("%s(%s)",e1,e2); :}
            |                                      {: RESULT = ""; :}            
            ;

funccall   ::= IF                                  {: RESULT = String.format("if"); :}
            |                                      {: RESULT = ""; :}            
            ;

args       ::= STRING_LITERAL:e1 args:e2           {: RESULT = String.format("%s%s",e1,e2); :}
            |  COMMA STRING_LITERAL:e1 args:e2     {: RESULT = String.format(",%s%s",e1,e2); :}
            |                                      {: RESULT = ""; :}            
            ;